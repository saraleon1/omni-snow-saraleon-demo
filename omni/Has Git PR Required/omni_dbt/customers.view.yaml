# Reference this view as omni_dbt__customers
label: Customers
schema_label: ""
#This description was pulled from dbt.
description: Customer overview data mart, offering key details for each unique
  customer. One row per customer.

schema: omni_dbt
table_name: CUSTOMERS

dimensions:
  customer_id:
    sql: '"CUSTOMER_ID"'
    format: ID
    #This description was pulled from dbt.
    description: The unique key of the orders mart.
    primary_key: true

  customer_name:
    sql: '"CUSTOMER_NAME"'
    #This description was pulled from dbt.
    description: Customers' full name.

  count_lifetime_orders:
    sql: '"COUNT_LIFETIME_ORDERS"'
    #This description was pulled from dbt.
    description: Total number of orders a customer has ever placed.

  first_ordered_at:
    sql: '"FIRST_ORDERED_AT"'
    #This description was pulled from dbt.
    description: The timestamp when a customer placed their first order.

  last_ordered_at:
    sql: '"LAST_ORDERED_AT"'
    #This description was pulled from dbt.
    description: The timestamp of a customer's most recent order.

  lifetime_spend_pretax_dim:
    sql: '"LIFETIME_SPEND_PRETAX"'
    #This description was pulled from dbt.
    description: The sum of all the pre-tax subtotals of every order a customer has placed.

  lifetime_tax_paid_dim:
    sql: '"LIFETIME_TAX_PAID"'
    #This description was pulled from dbt.
    description: The sum of all the tax portion of every order a customer has placed.

  lifetime_spend_dim:
    sql: '"LIFETIME_SPEND"'
    #This description was pulled from dbt.
    description: The sum of all the order totals (including tax) that a customer has
      ever placed.

  customer_type:
    sql: '"CUSTOMER_TYPE"'
    #This description was pulled from dbt.
    description: Options are 'new' or 'returning', indicating if a customer has
      ordered more than once or has only placed their first order to date.
    all_values: [ new, returning ]

measures:
  count_lifetime_orders:
    # Measure is defined in the 'customers' dbt semantic model (models/marts/customers.yml)
    sql: '"COUNT_LIFETIME_ORDERS"'
    description: Total count of orders per customer.
    aggregate_type: sum

  count:
    aggregate_type: count

  customers:
    # Measure is defined in the 'customers' dbt semantic model (models/marts/customers.yml)
    sql: '"CUSTOMER_ID"'
    description: Count of unique customers
    aggregate_type: count_distinct

  lifetime_spend_pretax:
    # Measure is defined in the 'customers' dbt semantic model (models/marts/customers.yml)
    sql: '"LIFETIME_SPEND_PRETAX"'
    description: Customer lifetime spend before taxes.
    aggregate_type: sum

  lifetime_spend:
    # Measure is defined in the 'customers' dbt semantic model (models/marts/customers.yml)
    sql: '"LIFETIME_SPEND"'
    description: Gross customer lifetime spend inclusive of taxes.
    aggregate_type: sum

#The info below was pulled from your dbt repository and is read-only.
dbt:
  name: customers
  target_schema: dbt_sleon_prod
  description: Customer overview data mart, offering key details for each unique
    customer. One row per customer.
  config:
    materialized: table
  code: |-
    with

    customers as (

        select * from {{ ref('stg_customers') }}

    ),

    orders as (

        select * from {{ ref('orders') }}

    ),

    customer_orders_summary as (

        select
            orders.customer_id,

            count(distinct orders.order_id) as count_lifetime_orders,
            count(distinct orders.order_id) > 1 as is_repeat_buyer,
            min(orders.ordered_at) as first_ordered_at,
            max(orders.ordered_at) as last_ordered_at,
            sum(orders.subtotal) as lifetime_spend_pretax,
            sum(orders.tax_paid) as lifetime_tax_paid,
            sum(orders.order_total) as lifetime_spend

        from orders

        group by 1

    ),

    joined as (

        select
            customers.*,

            customer_orders_summary.count_lifetime_orders,
            customer_orders_summary.first_ordered_at,
            customer_orders_summary.last_ordered_at,
            customer_orders_summary.lifetime_spend_pretax,
            customer_orders_summary.lifetime_tax_paid,
            customer_orders_summary.lifetime_spend,

            case
                when customer_orders_summary.is_repeat_buyer then 'returning'
                else 'new'
            end as customer_type

        from customers

        left join customer_orders_summary
            on customers.customer_id = customer_orders_summary.customer_id

    )

    select * from joined
